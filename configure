#!/bin/bash

# 初始化CFLAGS和RM变量
CFLAGS=""
RM=""
TARGET="main"

# 检查gcc是否安装
which gcc > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Error: GCC is not installed. Please install GCC."
  exit 1
fi

# 检查操作系统并配置相应的变量
OS="`uname`"
case $OS in
  'Linux' | 'Darwin')
    RM="rm -f"
    CFLAGS="-Iinclude -lncurses -lcjson -lmicrohttpd"
    ;;
  'WindowsNT')
    RM="del /Q"
    CFLAGS="-Iinclude -lws2_32 -lcjson -lncurses -lmicrohttpd"
    TARGET="main.exe"
    ;;
  *)
    echo "Unsupported OS: $OS"
    exit 1
    ;;
esac

# 检查cjson库是否可用
echo "#include <cjson/cJSON.h>" | gcc -E - > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cjson library is not installed. Please install cjson."
    exit 1
fi

# 生成Makefile
echo "Generating Makefile for $OS..."
cat > Makefile <<EOF
# 自动生成的Makefile
CC=gcc
RM=$RM
CFLAGS=$CFLAGS
TARGET=$TARGET

# 目标文件夹
OBJDIR=obj

# 源文件夹
SRCDIR=src

# 包含头文件夹
INCDIR=include

# 源文件
SRC=\$(wildcard \$(SRCDIR)/*.c)

# 目标文件
OBJ=\$(patsubst \$(SRCDIR)/%.c, \$(OBJDIR)/%.o, \$(SRC))

# 默认目标
all: \$(TARGET)

# 链接目标文件生成可执行文件
\$(TARGET): \$(OBJ)
	\$(CC) \$(CFLAGS) -o \$@ \$^

# 生成目标文件
\$(OBJDIR)/%.o: \$(SRCDIR)/%.c | \$(OBJDIR)
	\$(CC) \$(CFLAGS) -c \$< -o \$@

# 创建目标文件夹
\$(OBJDIR):
	mkdir -p \$(OBJDIR)

# 清理编译生成的文件
clean:
	\$(RM) -rf \$(OBJDIR) \$(TARGET)

# 添加check目标
check:
	@echo "Running tests..."
	@echo "ch16.json" | ./\$(TARGET) -t

# 添加distcheck目标
distcheck:
	@echo "Running distcheck..."
	# 编译
	make \$(TARGET)
	# 运行测试
	make check
	# 模拟安装过程
	@echo "Simulating installation..."
	# 模拟卸载过程
	@echo "Simulating uninstallation..."
	# 检查是否有遗留文件
	@echo "Checking for leftover files..."

.PHONY: all clean check distcheck
EOF

echo "Configuration completed successfully."
